{"ast":null,"code":"import { Casilla } from \"./casilla\";\nconst adyacencias = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\nexport class Tablero {\n  constructor(tamano, minas) {\n    this.casillas = [];\n    this.casillasRestantes = 0;\n    this.numeroMinas = 0;\n    // Crea las casillas necesarias en base al tamano del tablero\n    for (let fila = 0; fila < tamano; fila++) {\n      this.casillas[fila] = [];\n      for (let columna = 0; columna < tamano; columna++) {\n        this.casillas[fila][columna] = new Casilla(fila, columna);\n      }\n    }\n    // Crear las minas\n    for (let i = 0; i < minas; i++) {\n      const casilla = this.getCasillaRandom();\n      casilla.mina = true;\n    }\n    // Algoritmo de Coteo de minas adyacentes\n    for (let fila = 0; fila < tamano; fila++) {\n      for (let columna = 0; columna < tamano; columna++) {\n        let minas = 0;\n        for (let adyacencia of adyacencias) {\n          // verfifca si existe la casilla y si hay una mina en esa casilla\n          if (this.casillas[fila + adyacencia[0]] && this.casillas[fila + adyacencia[0]][columna + adyacencia[1]] && this.casillas[fila + adyacencia[0]][columna + adyacencia[1]].mina) {\n            minas++;\n          }\n        }\n        this.casillas[fila][columna].adyacentes = minas;\n        if (this.casillas[fila][columna]) {\n          this.numeroMinas++;\n        }\n      }\n    }\n    this.casillasRestantes = tamano * tamano - this.numeroMinas;\n  }\n  // Agarra un casilla alazar y le asigna una mina\n  getCasillaRandom() {\n    const fila = Math.floor(Math.random() * this.casillas.length);\n    const columna = Math.floor(Math.random() * this.casillas[fila].length);\n    return this.casillas[fila][columna];\n  }\n  checkCasilla(casilla) {\n    if (casilla.status !== 'abierta') {\n      return null;\n    } else if (casilla.mina) {\n      this.mostrarMinas();\n      return 'gameover';\n    } else {\n      casilla.status = 'despejada';\n      // abre las casillas proximas que no tengan minas automaticamente\n      if (casilla.adyacentes === 0) {\n        for (let adyacente of adyacencias) {\n          if (this.casillas[casilla.fila + adyacente[0]] && this.casillas[casilla.fila + adyacente[0]][casilla.columna + adyacente[1]]) {\n            this.checkCasilla(this.casillas[casilla.fila + adyacente[0]][casilla.columna + adyacente[1]]);\n          }\n        }\n      }\n      if (this.casillasRestantes-- <= 1) {\n        return 'ganastes';\n      }\n      return null;\n    }\n  }\n  mostrarMinas() {\n    for (let fila = 0; fila < this.casillas.length; fila++) {\n      for (let columna = 0; columna < this.casillas[fila].length; columna++) {\n        if (this.casillas[fila][columna].status === 'abierta') {\n          this.casillas[fila][columna].status = 'despejada';\n        }\n      }\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["Casilla","adyacencias","Tablero","constructor","tamano","minas","fila","casillas","columna","i","casilla","getCasillaRandom","mina","adyacencia","adyacentes","numeroMinas","casillasRestantes","Math","floor","random","length","checkCasilla","status","mostrarMinas","adyacente"],"sourceRoot":"","sources":["C:\\Users\\Fernando Capobianco\\Desktop\\MyStuff\\Software 1-2024\\PrograAngular\\Buscaminas-angular\\Busca\\ClientApp\\src\\app\\buscamina\\tablero.ts"],"sourcesContent":["import { Casilla } from \"./casilla\";\r\n\r\nconst adyacencias = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\r\n\r\nexport class Tablero {\r\n    casillas: Casilla[][] = [];\r\n    private casillasRestantes = 0;\r\n    private numeroMinas = 0;\r\n    constructor(tamano: number, minas: number) {\r\n\r\n        // Crea las casillas necesarias en base al tamano del tablero\r\n        for (let fila = 0; fila < tamano; fila++) {\r\n            this.casillas[fila] = [];\r\n            for (let columna = 0; columna < tamano; columna++) {\r\n                this.casillas[fila][columna] = new Casilla(fila, columna);\r\n\r\n            }\r\n        }\r\n\r\n        // Crear las minas\r\n        for (let i = 0; i < minas; i++) {\r\n            const casilla = this.getCasillaRandom();\r\n            casilla.mina = true;\r\n        }\r\n\r\n        // Algoritmo de Coteo de minas adyacentes\r\n        for (let fila = 0; fila < tamano; fila++) {\r\n            for (let columna = 0; columna < tamano; columna++) {\r\n                let minas = 0;\r\n                for (let adyacencia of adyacencias) {\r\n                    // verfifca si existe la casilla y si hay una mina en esa casilla\r\n                    if (this.casillas[fila + adyacencia[0]] && this.casillas[fila + adyacencia[0]][columna + adyacencia[1]] && this.casillas[fila + adyacencia[0]][columna + adyacencia[1]].mina) {\r\n                        minas++;\r\n                    }\r\n                }\r\n                this.casillas[fila][columna].adyacentes = minas;\r\n\r\n                if(this.casillas[fila][columna]){\r\n                    this.numeroMinas++;\r\n                }\r\n            }\r\n        }\r\n        this.casillasRestantes = (tamano * tamano) - this.numeroMinas;\r\n    }\r\n\r\n    // Agarra un casilla alazar y le asigna una mina\r\n    getCasillaRandom(): Casilla {\r\n        const fila = Math.floor(Math.random() * this.casillas.length);\r\n        const columna = Math.floor(Math.random() * this.casillas[fila].length);\r\n        return this.casillas[fila][columna];\r\n    }\r\n\r\n    checkCasilla(casilla: Casilla): 'gameover' |'ganastes'| null {\r\n        if (casilla.status !== 'abierta') {\r\n            return null;\r\n        } else if (casilla.mina) {\r\n            this.mostrarMinas();\r\n            return 'gameover'\r\n        } else {\r\n            casilla.status = 'despejada';\r\n            \r\n            // abre las casillas proximas que no tengan minas automaticamente\r\n            if(casilla.adyacentes === 0){\r\n                for(let adyacente of adyacencias){\r\n                    if (this.casillas[casilla.fila + adyacente[0]] && this.casillas[casilla.fila + adyacente[0]][casilla.columna + adyacente[1]]){\r\n                        this.checkCasilla(this.casillas[casilla.fila + adyacente[0]][casilla.columna + adyacente[1]]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(this.casillasRestantes-- <=1){\r\n                return 'ganastes';\r\n            }\r\n            return null;\r\n        }\r\n        \r\n    }\r\n    \r\n    mostrarMinas(){\r\n        for (let fila = 0; fila < this.casillas.length; fila++) {\r\n            for (let columna = 0; columna < this.casillas[fila].length; columna++) {\r\n                if (this.casillas[fila][columna].status === 'abierta') {\r\n                    this.casillas[fila][columna].status = 'despejada';\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}